import { NextResponse } from 'next/server'; import fs from 'fs'; import path from 'path';  export const runtime = 'nodejs';  const ALLOW = new Set([   'app','lib','components','public',   'package.json','tsconfig.json','next.config.js','vercel.json' ]);  function isAllowed(rel: string) {   for (const a of ALLOW) if (rel === a || rel.startsWith(a + '/')) return true;   return false; } function walk(abs: string, relBase: string, depth = 0, max = 6): any[] {   if (depth > max) return [];   const out: any[] = [];   for (const e of fs.readdirSync(abs, { withFileTypes: true })) {     const rel = path.posix.join(relBase, e.name);     if (!isAllowed(rel)) continue;     const child = path.join(abs, e.name);     if (e.isDirectory()) {       out.push({ type:'dir', path: rel });       out.push(...walk(child, rel, depth+1, max));     } else {       out.push({ type:'file', path: rel, size: fs.statSync(child).size });     }   }   return out; }  export async function GET(req: Request) {   const token = process.env.DEBUG_TOKEN || '';   if (token) {     const got = new URL(req.url).searchParams.get('token') || req.headers.get('x-debug-token');     if (got !== token) return NextResponse.json({ ok:false, error:'unauthorized' }, { status:401 });   }   const data = walk(process.cwd(), '');   return NextResponse.json({ ok:true, data }); }