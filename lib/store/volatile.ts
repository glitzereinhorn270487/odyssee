// Volatile In-Memory KV (serverless best-effort)  const mem = new Map<string, any>();  function setPath(obj:any, path:string, val:any) {   const parts = path.split('.');   let cur = obj;   for (let i=0;i<parts.length-1;i++){     const k=parts[i]; cur[k] = cur[k] ?? {}; cur = cur[k];   }   cur[parts[parts.length-1]] = val; } function getPath(obj:any, path:string) {   const parts = path.split('.');   let cur = obj;   for (let i=0;i<parts.length;i++){     if (cur == null) return undefined;     cur = cur[parts[i]];   }   return cur; }  export function get(key:string, def?:any) {   if (!mem.has('__root')) mem.set('__root', {});   const root = mem.get('__root');   const v = key.includes('.') ? getPath(root, key) : root[key];   return v === undefined ? def : v; }  export function set(key:string, val:any) {   if (!mem.has('__root')) mem.set('__root', {});   const root = mem.get('__root');   if (key.includes('.')) setPath(root, key, val);   else root[key] = val;   mem.set('__root', root);   return true; }  export function merge(obj:Record<string,any>) {   if (!mem.has('__root')) mem.set('__root', {});   const root = mem.get('__root');   for (const [k,v] of Object.entries(obj)) {     if (k.includes('.')) setPath(root, k, v);     else root[k] = v;   }   mem.set('__root', root);   return true; }  export function getNumber(key:string, def:number) {   const v = get(key);   const n = Number(v);   return Number.isFinite(n) ? n : def; }  export function getBoolean(key:string, def:boolean) {   const v = get(key);   if (v === undefined) return def;   if (typeof v === 'boolean') return v;   const s = String(v).toLowerCase();   return s==='1' || s==='true' || s==='yes' || s==='on'; }  /** ------- Abwärtskompatible & generische Aliases ------- */  // Generische Variante von get: erlaubt kvGet<T>(key, def) und CASTet auf T. export function kvGet<T = any>(key: string, def?: T): T {   return get(key, def as any) as T; }  // Generische Variante von set (Rückgabewert bleibt boolean) export function kvSet<T = any>(key: string, val: T): boolean {   return set(key, val); }  export const kvMerge = merge; export function kvNumber(key:string, def:number) { return getNumber(key, def); } export function kvBoolean(key:string, def:boolean) { return getBoolean(key, def); }  /** optionaler Default-Export */ export default {   get, set, merge, getNumber, getBoolean,   kvGet, kvSet, kvMerge, kvNumber, kvBoolean };